"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from kombu import Exchange, Queue

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'w*&6cxn&e=kq=^amx8umrua!eqaj=)va@o8ye3p75kr@5h0)!%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'example.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'example.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'


BROKER_URL = os.environ.get('BROKER_URL', 'amqp://guest:guest@rabbitmq:5672/%2F')
REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379')
EVENTS_REDIS_URL = os.environ.get('EVENTS_REDIS_URL', REDIS_URL)

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', None)
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', None)

BROKER_POOL_LIMIT = 1
BROKER_HEARTBEAT = None
BROKER_CONNECTION_TIMEOUT = 30
CELERY_RESULT_BACKEND = None
CELERY_SEND_EVENTS = False
CELERY_EVENT_QUEUE_EXPIRES = 60
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_ACKS_LATE = True
CELERYD_PREFETCH_MULTIPLIER = 1

SERVICE_NAME = 'django-example'

DEFAULT_QUEUE_NAME = SERVICE_NAME + '-default'

EVENTS_EXCHANGE = 'test-exchange'
NOTIFICATIONS_EXCHANGE = 'microservice-notifications'

default_exchange = Exchange('default', type='direct')
events_exchange = Exchange(EVENTS_EXCHANGE, type='fanout')

CELERY_QUEUES = (
    Queue(DEFAULT_QUEUE_NAME, default_exchange, routing_key=DEFAULT_QUEUE_NAME),
    Queue(SERVICE_NAME + '-events', events_exchange, queue_arguments={'x-max-priority': 10}),
)

CELERY_DEFAULT_QUEUE = DEFAULT_QUEUE_NAME
CELERY_DEFAULT_EXCHANGE = 'default'
CELERY_DEFAULT_ROUTING_KEY = DEFAULT_QUEUE_NAME
CELERY_ROUTES = ('zc_events.routers.TaskRouter', )

CELERY_IMPORTS = (
    'example.events_listener',
)

REST_FRAMEWORK = {
    'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'DEFAULT_PAGINATION_CLASS':
        'zc_common.remote_resource.pagination.PageNumberPagination',
    'DEFAULT_PARSER_CLASSES': (
        'zc_common.remote_resource.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'zc_common.remote_resource.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'zc_common.jwt_auth.JWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'zc_common.remote_resource.filters.JSONAPIFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ],
    'DEFAULT_METADATA_CLASS': 'zc_common.remote_resource.metadata.RelationshipMetadata',
}

JWT_AUTH = {
    'JWT_SECRET_KEY': os.environ.get('JWT_SECRET_KEY', '12lkjac2KF!@asdd1'),
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': False,
    'JWT_ENCODE_HANDLER': 'zc_common.jwt_auth.utils.jwt_encode_handler',
    'JWT_PAYLOAD_HANDLER': 'zc_common.jwt_auth.utils.jwt_payload_handler'
}

JSON_API_FORMAT_KEYS = 'camelize'
